{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting started"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this tutorial, we will do parameter inference on a simple statistical model. \n",
    "\n",
    "First off, let's see whether `delfi` is installed properly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2.2\n"
     ]
    }
   ],
   "source": [
    "import delfi\n",
    "print(delfi.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No error was raised, and we can continue."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the purpose of this example, we will consider a very simple statistical model, with a single parameter $\\theta$. Depending on $\\theta$, data is generated according to: $x|\\mathbf{\\theta} \\sim 0.5 \\mathcal{N}(x|\\mu=\\theta, \\sigma^2=1) + 0.5 \\mathcal{N}(x|\\mu=\\theta, \\sigma^2=0.1)$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This model is implemented in `delfi.simulator`, we will import the model and create an instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from delfi.simulator import GaussMixture\n",
    "\n",
    "n_params = 1\n",
    "m = GaussMixture(dim=n_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prior"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we will define a prior distribution over $\\theta$ as $\\mathcal{U}(-10, 10)$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import delfi.distribution as dd\n",
    "import numpy as np\n",
    "\n",
    "p = dd.Uniform(lower=[-10], upper=[10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will not reduce the dimensionality of our data, and instead just apply the identity:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from delfi.summarystats import Identity\n",
    "\n",
    "s = Identity()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having defined the simulator, prior, and summary statistics, we instantiate a generator object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from delfi.generator import Default\n",
    "\n",
    "g = Default(model=m, prior=p, summary=s)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having specified the generator, we can draw parameters and data using the `gen()` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "de1e3e60c4b545238091bed404109a2d"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6ccc07e8866546abb7555a91465063da"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "params, stats = g.gen(500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10b1a5978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(stats, params, '.')\n",
    "plt.ylabel(r'$\\theta$')\n",
    "plt.xlabel(r'x');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inference"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Say, we observed data $x_\\text{o}$ and are interested in the posterior distribution $p(\\theta|x=x_\\text{o})$. The likelihood-free inference (LFI) algorithms implemented in `delfi` allow doing so, without using the likelihood function: In most real world application, the likelihood function is not available. We aim to do inference by just generating examples, i.e., simulating the model. \n",
    "\n",
    "We chose the toy model such that the posterior is easily tractable analytically. This will allow us to judge the result against the ground truth."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Basic density estimation based LFI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A simple algorithm to use density estimation for LFI looks as follows:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](../algorithms/basic.svg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$q_\\phi$ will be a mixture density network (MDN): The MDN is a neural network that maps from $x$ to a Gaussian mixture distribution. \n",
    "\n",
    "For our example, we will set $K=2$, such that the resulting mixtures will have two components."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To apply the above algorithm to the toy problem, create an instance of the inference algorithm specifying details:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "73dd5f3923cf4582a7cc617448f08b95"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "db858d57f2154155b4be490c6a2414d6"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "from delfi.inference import Basic\n",
    "\n",
    "inf_basic = Basic(generator=g, n_components=2, n_hiddens=[10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We specified that we want K=2 components, and the neural network got a single hidden layer with 10 units. Additional entries in the list passed for `n_hiddens` would create additional layers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8c6d755454f6477b96bb9d0edf595536"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c5c5b3586e5c494f9a11ceb7eff55099"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2091c3fd709541d0933cf20f7aab5853"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "log, train_data = inf_basic.run(n_train=5000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We drew N=n_train training examples and ran the algorithm. We can plot the loss function, across training rounds of the neural network:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nSR8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10efd1eb8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(log['loss'])\n",
    "plt.xlabel('Iteration')\n",
    "plt.ylabel('Loss');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Say we observed $x_o = 0.$ and want to predict the posterior $\\hat{p}(\\theta | x=x_{\\text{o}})$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "xo = np.array([[0.]])\n",
    "posterior = inf_basic.predict(xo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameters of the predicted posterior are:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "component 1: mixture weight = 0.53; mean = 0.05; variance = 0.12\n",
      "component 2: mixture weight = 0.47; mean = -0.07; variance = 1.10\n"
     ]
    }
   ],
   "source": [
    "for k in range(2):\n",
    "    print(r'component {}: mixture weight = {:.2f}; mean = {:.2f}; variance = {:.2f}'.format(\n",
    "        k+1, posterior.a[k], posterior.xs[k].m[0], posterior.xs[k].S[0][0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The correct posterior for this problem is known -- since the prior is uniform it is simply: \n",
    "\n",
    "$$p(\\theta|x=x_{\\text{o}}) = 0.5 \\mathcal{N}(\\theta|\\mu=0, \\sigma^2=1) + 0.5 \\mathcal{N}(\\theta|\\mu=0, \\sigma^2=0.1)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nxzY8o+y2AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1101bdb70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "true_posterior = dd.MoG(a=[0.5, 0.5], ms=[[0.], [0.]], Ss=[[[1.0]], [[0.1]]])\n",
    "plt.plot(posterior.eval(np.arange(-5.0, 5.0, 0.01).reshape(-1,1), log=False), '-b')\n",
    "plt.plot(true_posterior.eval(np.arange(-5.0, 5.0, 0.01).reshape(-1,1), log=False), '-r')\n",
    "plt.legend(['predicted posterior', 'true posterior'], frameon=False)\n",
    "plt.axis('off');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sequential Neural Posterior Estimation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the problem we picked here, the basic inference algorithm does a good job. More complicated problems, however, may require more sophisticated algorithms. \n",
    "\n",
    "Instead of sampling all parameters from the prior, we may draw only the first set of parameters from the prior and then switch to using a different distribution to sample from (a proposal distribution). Intuitively, the proposal distribution is chosen such that, when simulated, data is closer to $x_o$. In order to get the correct posterior, we will need to account for the fact that we drew these samples from a different distribution:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](../algorithms/snpe.svg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5d24efc08d8e499884e2e86a4380c3c7"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8c331de6e2b345809436387a0e560086"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "90d61d959da143419384b2dca6f21fcd"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7cdad7dde7934707a7b52377c4fb9312"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e94a0fa960fe418f87baec802701f404"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "46c22865707f425f8272cab7bfc39c61"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0d3a7d9940c44be1b050c2c4f9c556dc"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d86b01ac5c154136ac106f93185cee33"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7fe60f508b7f4510b0e14e93103294ac"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "42c067fa94d24db7845e50632313e71e"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "91150865c62b4ecc95d6dda3b73a2da7"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "from delfi.inference import SNPE\n",
    "\n",
    "xo = np.array([[0.]])\n",
    "inf_snpe = SNPE(generator=g, n_components=2, n_hiddens=[10], obs=xo)\n",
    "logs, tds = inf_snpe.run(n_train=[2500, 500], n_rounds=3)\n",
    "posterior = inf_snpe.predict(xo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "component 1: mixture weight = 0.66; mean = 0.01; variance = 0.18\n",
      "component 2: mixture weight = 0.34; mean = 0.02; variance = 1.15\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nJIH+P3tBjviko+M6AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x114ca2b00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for k in range(2):\n",
    "    print(r'component {}: mixture weight = {:.2f}; mean = {:.2f}; variance = {:.2f}'.format(\n",
    "        k+1, posterior.a[k], posterior.xs[k].m[0], posterior.xs[k].S[0][0]))\n",
    "    \n",
    "true_posterior = dd.MoG(a=[0.5, 0.5], ms=[[0.], [0.]], Ss=[[[1.0]], [[0.1]]])\n",
    "plt.plot(posterior.eval(np.arange(-5.0, 5.0, 0.01).reshape(-1,1), log=False), '-b')\n",
    "plt.plot(true_posterior.eval(np.arange(-5.0, 5.0, 0.01).reshape(-1,1), log=False), '-r')\n",
    "plt.legend(['predicted posterior', 'true posterior'], frameon=False)\n",
    "plt.axis('off');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conditional density estimation LFI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, `delfi` implements an algorithm by Papamakarios and Murray (2016) which inspired SNPE. For details see:\n",
    "[Fast ε-free Inference of Simulation Models with Bayesian Conditional Density Estimation](https://arxiv.org/abs/1605.06376v3). Similar to `Basic` and `SNPE`, `CDELFI` can be imported from `delfi.inference`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adapting to other problems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to use `delfi` with a specific problem, you'd need to implement a simulator class and possibly summary statistics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Simulators should inherit from a simulator base class. The base class for simulators specifies that each child needs to inherit a method called `gen_single()` -- the function that forward simulates a single $\\theta$ to data. It should return a dictionary that contains the result under a key called `data`. [This is also detailled in the docstring of the base class](https://github.com/mackelab/delfi/blob/master/delfi/simulator/BaseSimulator.py). For an actual implementation, you can see the code for the mixture model we used above: https://github.com/mackelab/delfi/blob/master/delfi/simulator/GaussMixture.py.\n",
    "\n",
    "For this example, we used the identity as a summary statistics. If you were to use summary statistics, consider the implementation of mean summary statistics for a basic example: https://github.com/mackelab/delfi/blob/master/delfi/summarystats/Mean.py, and again, there is a [base class specifying the interface](https://github.com/mackelab/delfi/blob/master/delfi/summarystats/BaseSummaryStats.py)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
